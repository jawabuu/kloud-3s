---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: clean-node
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: clean-node
  namespace: kube-system
rules:
  - apiGroups:
    - ""
    resources:
    - nodes
    verbs:
    - list
    - patch
    - get
    - watch
    - delete
  - apiGroups:
    - coordination.k8s.io
    resources:
    - leases
    verbs:
    - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: clean-node
subjects:
- kind: ServiceAccount
  name: clean-node
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: clean-node
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubernetes-event-exporter-extra
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - nodes
  - pods
  - events
  - services
  - resourcequotas
  - replicationcontrollers
  - limitranges
  - persistentvolumeclaims
  - persistentvolumes
  - namespaces
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - statefulsets
  - daemonsets
  - deployments
  - replicasets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kubernetes-event-exporter-extra
subjects:
- kind: ServiceAccount
  name: kubernetes-event-exporter
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: kubernetes-event-exporter-extra
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: clean-node
  namespace: kube-system
  labels:
    app: clean-node
spec:
  selector:
    matchLabels:
      app: clean-node
  template:
    metadata:
      labels:
        app: clean-node
    spec:
      serviceAccountName: clean-node
      priorityClassName: system-node-critical
      tolerations:
      - effect: NoSchedule
        operator: Exists
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        operator: Exists
        key: node-role.kubernetes.io/master
      containers:
      - name: webhook
        image: thecatlady/webhook
        imagePullPolicy: Always
        args: ["-verbose", "-hotreload", "-hooks=/tmp/hooks/hooks.json"]
        ports:
          - name: http
            containerPort: 9000
        env:
          - name: EXTRA_PARAM
            value: "-hotreload -verbose -hooks /tmp/hooks/hooks.json"
        volumeMounts:
        - mountPath: /tmp/hooks
          name: hooks
      volumes:
        - name: hooks
          configMap:
            defaultMode: 0755
            name: hooks
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: Exists
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hooks
  namespace: kube-system
data:
  debug.sh: |
    #!/bin/sh
    echo $*
  clean-node.sh: |
    #!/bin/sh
    echo "Node: $${1}"
    echo "Event: $${2}"
    echo "Payload: $${3}"
    node=$1
    event=$2
    action=skip

    if [ "$1" = "$${1#pool}" ]; then
      echo "Not an autoscaling pool node"
      exit 0
    else
      echo "Continue processing.."
    fi


    if [ "$2" = "NodeNotReady" ]; then
      echo "Marking node for deletion.."
      action=delete
    fi

    wget -qSO- \
    --header='Content-Type:application/json' \
    --header="Authorization: Bearer $(cat /run/secrets/kubernetes.io/serviceaccount/token)" \
    --no-check-certificate \
    'https://kubernetes.default.svc.cluster.local/version'
    
    wget -qSO- \
    --header='Content-Type:application/json' \
    --header="Authorization: Bearer $(cat /run/secrets/kubernetes.io/serviceaccount/token)" \
    --no-check-certificate \
    "https://kubernetes.default.svc.cluster.local/api/v1/nodes/$1"

    if [ "$action" =  "delete" ]; then
      echo "Deleting node"
      curl -X DELETE --cacert /run/secrets/kubernetes.io/serviceaccount/ca.crt \
      --header "Authorization: Bearer $(cat /run/secrets/kubernetes.io/serviceaccount/token)" \
      "https://kubernetes.default.svc.cluster.local/api/v1/nodes/$1"
    else
      echo "Skip delete"
    fi

  hooks.json: |
    [{
      "id": "clean-node",
      "execute-command": "/tmp/hooks/clean-node.sh",
      "include-command-output-in-response": true,
      "incoming-payload-content-type": "application/json",
      "pass-arguments-to-command": [
      {
        "source": "payload",
        "name": "involvedObject.name"
      },
      {
        "source": "payload",
        "name": "reason"
      },
      {
        "source": "payload",
        "name": "involvedObject.kind"
      },
      {
        "source": "entire-payload"
      }],
      "trigger-rule": {
        "and": [
        {
          "match":
          {
            "type": "regex",
            "value": "Node",
            "parameter":
            {
              "source": "payload",
              "name": "involvedObject.kind"
            }
          }
        },
        {
          "match":
          {
            "type": "regex",
            "regex": ".*",
            "parameter":
            {
              "source": "payload",
              "name": "involvedObject.name"
            }
          }
        }
        ]
      }
    },
    {
      "id": "debug",
      "execute-command": "/tmp/hooks/debug.sh",
      "include-command-output-in-response": true,
      "incoming-payload-content-type": "application/json",
      "pass-arguments-to-command": [
      {
        "source": "entire-payload"
      }
      ]
    }
    ]

---
apiVersion: v1
kind: Service
metadata:
  name: webhook
  namespace: kube-system
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 9000
  selector:
    app: clean-node
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: kubernetes-event-exporter
  namespace: kube-system
spec:
  chart: kubernetes-event-exporter
  repo: https://charts.bitnami.com/bitnami
  targetNamespace: kube-system
  valuesContent: |-

    config:
      logLevel: debug
      logFormat: json
      route:
        routes:
          - match:
            - kind: "Node"
              receiver: "alerts"
      receivers:
      - name: "dump"
        stdout: {}
      - name: "alerts"
        webhook:
          endpoint: http://webhook.kube-system.svc.cluster.local/hooks/clean-node
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: node-role.kubernetes.io/master
              operator: Exists
---