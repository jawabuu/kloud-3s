---
apiVersion: v1
kind: Namespace
metadata:
  name: cert-manager
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: cert-manager
  namespace: kube-system
spec:
  chart: cert-manager
  repo: https://charts.jetstack.io
  targetNamespace: cert-manager
  bootstrap: true
  valuesContent: |-
    installCRDs: true
    ingressShim:
      defaultIssuerName: letsencrypt-live
      defaultIssuerKind: ClusterIssuer
      defaultIssuerGroup: cert-manager.io
    extraArgs:
      - --dns01-recursive-nameservers-only
      - --dns01-recursive-nameservers=8.8.8.8:53,1.1.1.1:53
    podDnsPolicy: "None"
    podDnsConfig:
      nameservers:
        - "1.1.1.1"
        - "8.8.8.8"
---
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: self-signed
spec:
  selfSigned: {}
---
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-test
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: admin@${domain}
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource used to store the account's private key.
      name: test-issuer-account-key
    # Add a single challenge solver, HTTP01
    solvers:
      - http01:
          ingress:
            class: traefik-cert-manager
---
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-live
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: admin@${domain}
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource used to store the account's private key.
      name: live-issuer-account-key
    # Add a single challenge solver, HTTP01
    solvers:
      - http01:
          ingress:
            class: traefik-cert-manager
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: self-signed-cert
  namespace: default
spec:
  commonName: ${domain}
  secretName: self-signed-cert
  dnsNames:
    - ${domain}
    - "*.${domain}"
  issuerRef:
    name: self-signed
    kind: ClusterIssuer
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: self-signed-cert
  namespace: kube-system
spec:
  commonName: ${domain}
  secretName: self-signed-cert
  dnsNames:
    - ${domain}
    - "*.${domain}"
  issuerRef:
    name: self-signed
    kind: ClusterIssuer
%{ if dns_auth.provider == "digitalocean" ~}
---
apiVersion: v1
kind: Secret
metadata:
  name: digitalocean-dns
  namespace: cert-manager
stringData:
  access-token: ${dns_auth.token}
%{ endif ~}
%{ if dns_auth.provider == "cloudflare" ~}
---
apiVersion: v1
kind: Secret
metadata:
  name: cloudflare-dns
  namespace: cert-manager
stringData:
  cloudflare-api-key: ${dns_auth.api_token}
  cloudflare-api-email: ${dns_auth.email}
%{ endif ~}
---
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: ${acme_email}
    privateKeySecretRef:
      name: letsencrypt-staging-key
    solvers: %{ if dns_auth.provider != "" }
    # ACME DNS-01 provider configurations
    - dns01:
        %{~ if dns_auth.provider == "digitalocean" }
        digitalocean:
          tokenSecretRef:
            name: digitalocean-dns
            key: access-token
        %{ endif }
        %{~ if dns_auth.provider == "cloudflare" }
        cloudflare:
          email: ${dns_auth.email}
          apiKeySecretRef:
            name: cloudflare-dns
            key: cloudflare-api-key
        %{ endif } %{ endif }
---
apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: ${acme_email}
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers: %{ if dns_auth.provider != "" }
    # ACME DNS-01 provider configurations
    - dns01:
        %{~ if dns_auth.provider == "digitalocean" }
        digitalocean:
          tokenSecretRef:
            name: digitalocean-dns
            key: access-token
        %{ endif }
        %{~ if dns_auth.provider == "cloudflare" }
        cloudflare:
          email: ${dns_auth.email}
          apiKeySecretRef:
            name: cloudflare-dns
            key: cloudflare-api-key
        %{ endif } %{ endif }
%{ if create_certs == false }
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: test-dns01-cert
  namespace: kube-system
spec:
  commonName: ${dns_auth.domain}
  secretName: test-dns01-cert
  dnsNames:
    - ${dns_auth.domain}
    - "*.${dns_auth.domain}"
  issuerRef:
    name: letsencrypt-staging
    kind: ClusterIssuer
%{ endif }
%{ if create_certs == true }
---
apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: live-dns01-cert
  namespace: kube-system
spec:
  commonName: ${dns_auth.domain}
  secretName: live-dns01-cert
  dnsNames:
    - ${dns_auth.domain}
    - "*.${dns_auth.domain}"
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
%{ endif }