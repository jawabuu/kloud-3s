---
apiVersion: v1
kind: Namespace
metadata:
  name: minio-operator
---
apiVersion: v1
kind: Service
metadata:
  name: minio-np
  namespace: default
spec:
  type: NodePort
  ports:
  - name: minio
    port: 80
    nodePort: 30900
    protocol: TCP
    targetPort: 9000
  selector:
    v1.min.io/tenant: minio
---
apiVersion: v1
kind: Service
metadata:
  name: minio-console-np
  namespace: default
spec:
  type: NodePort
  ports:
  - name: console
    port: 9090
    nodePort: 31443
    protocol: TCP
    targetPort: 9090
  selector:
    v1.min.io/console: minio-console
---
apiVersion: helm.cattle.io/v1
kind: HelmChart
metadata:
  name: minio-operator
  namespace: kube-system
spec:
  chart: minio-operator
  repo: https://operator.min.io/
  targetNamespace: minio-operator
  jobImage: rancher/klipper-helm:v0.6.0-build20210608
  version: 4.1.6
  timeout: 900s
  valuesContent: |-
  
    operator:
      resources:
        requests:
          cpu: 100m
          memory: 128Mi
          ephemeral-storage: 250Mi
    tenants: {}
---
## Secret to be used as MinIO Root Credentials
apiVersion: v1
kind: Secret
metadata:
  name: minio-creds-secret
type: Opaque
stringData:
  accesskey: ${s3_access_key}
  secretkey: ${s3_secret_key}
---
## Secret to be used for MinIO Console
apiVersion: v1
kind: Secret
metadata:
  name: console-secret
  labels:
    app.kubernetes.io/managed-by: Helm
  annotations:
    meta.helm.sh/release-name: minio-operator
    meta.helm.sh/release-namespace: minio-operator
type: Opaque
stringData:
  CONSOLE_PBKDF_PASSPHRASE: ${console_pbkdf_passphrase}
  CONSOLE_PBKDF_SALT: ${console_pbkdf_salt}
  CONSOLE_ACCESS_KEY: ${console_access_key}
  CONSOLE_SECRET_KEY: ${console_secret_key}
---
apiVersion: v1
kind: Secret
metadata:
  name: kes-config
type: Opaque
stringData:
  server-config.yaml: |-
    address: 0.0.0.0:7373
    root: _ # Effectively disabled since no root identity necessary.
    tls:
      key: /tmp/kes/server.key   # Path to the TLS private key
      cert: /tmp/kes/server.crt # Path to the TLS certificate
      proxy:
        identities: []
        header:
          cert: X-Tls-Client-Cert
    policy:
      my-policy:
        paths:
        - /v1/key/create/*
        - /v1/key/generate/*
        - /v1/key/decrypt/*
        identities:
        - $${MINIO_KES_IDENTITY}
    cache:
      expiry:
        any: 5m0s
        unused: 20s
    log:
      error: on
      audit: off
    keys:
      fs:
        path: "/tmp/keys"
---
## MinIO Tenant Definition
apiVersion: minio.min.io/v2
kind: Tenant
metadata:
  name: minio
  ## Optionally pass labels to be applied to the statefulset pods
  labels:
    app: minio
  ## Annotations for MinIO Tenant Pods
  annotations:
    prometheus.io/path: /minio/v2/metrics/cluster
    prometheus.io/port: "9000"
    prometheus.io/scrape: "true"
spec:
  ## Registry location and Tag to download MinIO Server image
  image: minio/minio:RELEASE.2021-06-17T00-10-46Z
  # image: minio/minio:RELEASE.2021-07-08T19-43-25Z
  imagePullPolicy: IfNotPresent

  ## Secret with credentials to be used by MinIO Tenant.
  ## Refers to the secret object created above.
  credsSecret:
    name: minio-creds-secret

  ## Specification for MinIO Pool(s) in this Tenant.
  pools:
    ## Servers specifies the number of MinIO Tenant Pods / Servers in this pool.
    ## For standalone mode, supply 1. For distributed mode, supply 4 or more.
    ## Note that the operator does not support upgrading from standalone to distributed mode.
    - servers: 1

      ## volumesPerServer specifies the number of volumes attached per MinIO Tenant Pod / Server.
      volumesPerServer: 4

      ## This VolumeClaimTemplate is used across all the volumes provisioned for MinIO Tenant in this
      ## Pool.
      volumeClaimTemplate:
        metadata:
          name: data
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 10Gi
      ## Configure security context
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        fsGroup: 1000

  ## Mount path where PV will be mounted inside container(s).
  mountPath: /export
  ## Enable automatic Kubernetes based certificate generation and signing as explained in
  ## https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster
  requestAutoCert: false

  ## Enable S3 specific features such as Bucket DNS which would allow `buckets` to be
  ## accessible as DNS entries of form `<bucketname>.minio.default.svc.cluster.local`
  s3:
    ## This feature is turned off by default
    bucketDNS: false

  ## This field is used only when "requestAutoCert" is set to true. Use this field to set CommonName
  ## for the auto-generated certificate. Internal DNS name for the pod will be used if CommonName is
  ## not provided. DNS name format is *.minio.default.svc.cluster.local
  certConfig:
    commonName: ""
    organizationName: []
    dnsNames: []

  ## PodManagement policy for MinIO Tenant Pods. Can be "OrderedReady" or "Parallel"
  ## Refer https://kubernetes.io/docs/tutorials/stateful-application/basic-stateful-set/#pod-management-policy
  ## for details.
  podManagementPolicy: Parallel

  ## serviceMetadata allows passing additional labels and annotations to MinIO and Console specific
  ## services created by the operator.
  serviceMetadata:
    minioServiceLabels:
      label: minio-svc
    minioServiceAnnotations:
      v2.min.io: minio-svc
    consoleServiceLabels:
      label: console-svc
    consoleServiceAnnotations:
      v2.min.io: console-svc
  env:
    - name: MINIO_IDENTITY_OPENID_CONFIG_URL
      value: "https://dex.${domain}/.well-known/openid-configuration"
    - name: MINIO_IDENTITY_OPENID_CLIENT_ID
      value: ${dex_client_id}
    - name: MINIO_IDENTITY_OPENID_SCOPES
      value: "openid,profile,email,groups"
    - name: MINIO_IDENTITY_OPENID_CLAIM_NAME
      value: "groups"

  ## PriorityClassName indicates the Pod priority and hence importance of a Pod relative to other Pods.
  ## This is applied to MinIO pods only.
  ## Refer Kubernetes documentation for details https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass/
  # priorityClassName: high-priority

  ## Define configuration for Console (Graphical user interface for MinIO)
  ## Refer https://github.com/minio/console
  console:
    image: minio/console:v0.7.5
    imagePullPolicy: "IfNotPresent"
    replicas: 1
    consoleSecret:
      name: console-secret
    securityContext:
      runAsUser: 1000
      runAsGroup: 2000
      runAsNonRoot: true
      fsGroup: 2000
    env:
      - name: CONSOLE_IDP_URL
        value: "https://dex.${domain}"
      - name: CONSOLE_IDP_CLIENT_ID
        value: ${dex_client_id}
      - name: CONSOLE_IDP_SECRET
        value: ${dex_client_secret}
      - name: CONSOLE_IDP_CALLBACK
        value: "https://s3.${domain}/oauth_callback"
      - name: CONSOLE_IDP_SCOPES
        value: "openid,profile,email,groups"
  # log:
    # image: minio/logsearchapi:v4.1.2
    # audit:
      # diskCapacityGB: 1
  ## Define configuration for KES (stateless and distributed key-management system)
  ## Refer https://github.com/minio/kes
  kes:
    image: minio/kes:v0.14.0
    replicas: 1
    kesSecret:
      name: kes-config
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/ssl-proxy-headers: 'X-Forwarded-Proto: https'
    kubernetes.io/ingress.class: traefik-cert-manager
    kubernetes.io/tls-acme: "true"
    traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
  name: s3
  namespace: default
spec:
  tls:
    - hosts:
      - s3.${domain}
      secretName: s3-tls
  rules:
    - host: s3.${domain}
      http:
        paths:
          - backend:
              serviceName: minio-console
              servicePort: 9090
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/ssl-proxy-headers: 'X-Forwarded-Proto: https'
    kubernetes.io/ingress.class: traefik-cert-manager
    kubernetes.io/tls-acme: "true"
    traefik.ingress.kubernetes.io/router.entrypoints: web, websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
  name: minio
  namespace: default
spec:
  tls:
    - hosts:
      - minio.${domain}
      secretName: minio-tls
  rules:
    - host: minio.${domain}
      http:
        paths:
          - backend:
              serviceName: minio
              servicePort: 80
---

  # mc alias set minio https://minio.${domain} accesskey secretkey
  # mc admin policy add minio '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["s3:*"],"Resource":["arn:aws:s3:::*"]},{"Effect":"Allow","Action":["admin:*"]}]}'
  # mc admin trace -v -a minio